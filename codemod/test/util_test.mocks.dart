// Mocks generated by Mockito 5.0.3 from annotations
// in codemod/test/util_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:convert' as _i3;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeIOSink extends _i1.Fake implements _i2.IOSink {}

class _FakeEncoding extends _i1.Fake implements _i3.Encoding {}

/// A class which mocks [Stdout].
///
/// See the documentation for Mockito's code generation for more information.
class MockStdout extends _i1.Mock implements _i2.Stdout {
  MockStdout() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasTerminal =>
      (super.noSuchMethod(Invocation.getter(#hasTerminal), returnValue: false)
          as bool);
  @override
  int get terminalColumns =>
      (super.noSuchMethod(Invocation.getter(#terminalColumns), returnValue: 0)
          as int);
  @override
  int get terminalLines =>
      (super.noSuchMethod(Invocation.getter(#terminalLines), returnValue: 0)
          as int);
  @override
  bool get supportsAnsiEscapes =>
      (super.noSuchMethod(Invocation.getter(#supportsAnsiEscapes),
          returnValue: false) as bool);
  @override
  _i2.IOSink get nonBlocking =>
      (super.noSuchMethod(Invocation.getter(#nonBlocking),
          returnValue: _FakeIOSink()) as _i2.IOSink);
  @override
  _i3.Encoding get encoding => (super.noSuchMethod(Invocation.getter(#encoding),
      returnValue: _FakeEncoding()) as _i3.Encoding);
  @override
  set encoding(_i3.Encoding? encoding) =>
      super.noSuchMethod(Invocation.setter(#encoding, encoding),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic> get done => (super.noSuchMethod(Invocation.getter(#done),
      returnValue: Future.value(null)) as _i4.Future<dynamic>);
  @override
  void writeAll(Iterable<dynamic>? objects, [String? sep = r'']) =>
      super.noSuchMethod(Invocation.method(#writeAll, [objects, sep]),
          returnValueForMissingStub: null);
  @override
  void add(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#add, [data]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic> addStream(_i4.Stream<List<int>>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future.value(null)) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> flush() =>
      (super.noSuchMethod(Invocation.method(#flush, []),
          returnValue: Future.value(null)) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future.value(null)) as _i4.Future<dynamic>);
}
